# Sample cloudbuild.yaml that can containerize a Java app with JFrog Artifactory as a source of truth.
# NOTE: JFrog cloud builder image should exist. cloudbuild.yaml to build JFrog cloud builder image exists one level up.

# In this directory, run the following command to build this builder.
# $ gcloud builds submit . --config=cloudbuild.yaml

substitutions:
  _JFROG_SERVER_NAME: <servername-dockerReponame>.jfrog.io
  _JFROG_REPO_NAME: clouddays
  _JFROG_BUILDER_VERSION: 1.17.3
  _JFROG_USER: <user-name>
  _JFROG_ACCESS_TOKEN: $$JFROG_ACCESS_TOKEN

steps:
- name: 'launcher.gcr.io/google/ubuntu1604'
  id: 'Printing secrets'
  entrypoint: bash
  args:
  - -c
  - echo "Secret key 'JFROG_ACCESS_TOKEN' has value '$$JFROG_ACCESS_TOKEN'"
  secretEnv: ['JFROG_ACCESS_TOKEN']

- name: 'gcr.io/$PROJECT_ID/npm/jfrog:${_JFROG_BUILDER_VERSION}'
  args: ['config', 'add', '${_JFROG_REPO_NAME}', '--artifactory-url=https://${_JFROG_SERVER_NAME}/artifactory','--interactive=false' ,'--access-token=${_JFROG_ACCESS_TOKEN}']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

  # Configure npm repo
- name: 'gcr.io/$PROJECT_ID/npm/jfrog:${_JFROG_BUILDER_VERSION}'
  args: ['rt', 'npm-config', '--repo-resolve=npm-mitali', '--repo-deploy=npm-mitali','--server-id-resolve=${_JFROG_REPO_NAME}','--server-id-deploy=${_JFROG_REPO_NAME}']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

# Build a sample npm project
- name: 'gcr.io/$PROJECT_ID/npm/jfrog:${_JFROG_BUILDER_VERSION}'
  args: ['rt', 'npm-install', '--build-name=npm_build', '--build-number=1']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

  # publish the sample npm project
- name: 'gcr.io/$PROJECT_ID/npm/jfrog:${_JFROG_BUILDER_VERSION}'
  args: ['rt', 'npm-publish', '--build-name=npm_build', '--build-number=1']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

  # build-publish the sample npm project
- name: 'gcr.io/$PROJECT_ID/npm/jfrog:${_JFROG_BUILDER_VERSION}'
  args: ['rt', 'build-publish', 'npm_build', '1']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

# Containerize npm app
- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'build'
  - '--tag=${_JFROG_SERVER_NAME}/npm-app:latest'
  - '.'
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

- name: 'gcr.io/cloud-builders/docker'
  args:
  - 'login'
  - '${_JFROG_SERVER_NAME}'
  - '-u'
  - '${_JFROG_USER}'
  - '-p'
  - '$$JFROG_ACCESS_TOKEN'
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']
  
# Docker Push the image to artifactiry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_JFROG_SERVER_NAME}/npm-app:latest']
  env: ['TMPDIR=/workspace']
  dir: 'workshop-app'
  secretEnv: ['JFROG_ACCESS_TOKEN']

availableSecrets:
  secretManager:
  - versionName: projects/jfrog-partnership-team/secrets/access-token/versions/latest
    env: 'JFROG_ACCESS_TOKEN'
    
images:
- '${_JFROG_SERVER_NAME}/npm-app:latest'
tags: ['cloud-builders-community']
